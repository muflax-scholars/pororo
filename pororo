#!/usr/bin/env python
# Copyright muflax <mail@muflax.com>, 2010
# License: GNU GPL 3 <http://www.gnu.org/copyleft/gpl.html>

# hey, I only use 2.* because of cairo, ok?
from __future__ import print_function, unicode_literals, division

import base64
import math
import optparse
from random import randint
import re
import cStringIO as StringIO
import sys
import time

# I use pygame because I'm lame and cairo because I'm a whore
#import cairo
import pygame
from pygame.locals import *

# yeah, the code mutated a bit... sorry :<
# TODO:
#       * show labels for each worm? (would use cairo)
#       * make the usage understandable for anyone except me
#       * skip turns?

BEEP = base64.b64decode(
"""T2dnUwACAAAAAAAAAABaoh12AAAAABFppXEBHgF2b3JiaXMAAAAAAUSsAAAAAAAAgDgBAAAAAAC4
AU9nZ1MAAAAAAAAAAAAAWqIddgEAAAAzT41PDjr///////////////+BA3ZvcmJpcyoAAABYaXBo
Lk9yZyBsaWJWb3JiaXMgSSAyMDEwMDMyNSAoRXZlcnl3aGVyZSkAAAAAAQV2b3JiaXMiQkNWAQBA
AAAkcxgqRqVzFoQQGkJQGeMcQs5r7BlCTBGCHDJMW8slc5AhpKBCiFsogdCQVQAAQAAAh0F4FISK
QQghhCU9WJKDJz0IIYSIOXgUhGlBCCGEEEIIIYQQQgghhEU5aJKDJ0EIHYTjMDgMg+U4+ByERTlY
EIMnQegghA9CuJqDrDkIIYQkNUhQgwY56ByEwiwoioLEMLgWhAQ1KIyC5DDI1IMLQoiag0k1+BqE
Z0F4FoRpQQghhCRBSJCDBkHIGIRGQViSgwY5uBSEy0GoGoQqOQgfhCA0ZBUAkAAAoKIoiqIoChAa
sgoAyAAAEEBRFMdxHMmRHMmxHAsIDVkFAAABAAgAAKBIiqRIjuRIkiRZkiVZkiVZkuaJqizLsizL
sizLMhAasgoASAAAUFEMRXEUBwgNWQUAZAAACKA4iqVYiqVoiueIjgiEhqwCAIAAAAQAABA0Q1M8
R5REz1RV17Zt27Zt27Zt27Zt27ZtW5ZlGQgNWQUAQAAAENJpZqkGiDADGQZCQ1YBAAgAAIARijDE
gNCQVQAAQAAAgBhKDqIJrTnfnOOgWQ6aSrE5HZxItXmSm4q5Oeecc87J5pwxzjnnnKKcWQyaCa05
55zEoFkKmgmtOeecJ7F50JoqrTnnnHHO6WCcEcY555wmrXmQmo21OeecBa1pjppLsTnnnEi5eVKb
S7U555xzzjnnnHPOOeec6sXpHJwTzjnnnKi9uZab0MU555xPxunenBDOOeecc84555xzzjnnnCA0
ZBUAAAQAQBCGjWHcKQjS52ggRhFiGjLpQffoMAkag5xC6tHoaKSUOggllXFSSicIDVkFAAACAEAI
IYUUUkghhRRSSCGFFGKIIYYYcsopp6CCSiqpqKKMMssss8wyyyyzzDrsrLMOOwwxxBBDK63EUlNt
NdZYa+4555qDtFZaa621UkoppZRSCkJDVgEAIAAABEIGGWSQUUghhRRiiCmnnHIKKqiA0JBVAAAg
AIAAAAAAT/Ic0REd0REd0REd0REd0fEczxElURIlURIt0zI101NFVXVl15Z1Wbd9W9iFXfd93fd9
3fh1YViWZVmWZVmWZVmWZVmWZVmWIDRkFQAAAgAAIIQQQkghhRRSSCnGGHPMOegklBAIDVkFAAAC
AAgAAABwFEdxHMmRHEmyJEvSJM3SLE/zNE8TPVEURdM0VdEVXVE3bVE2ZdM1XVM2XVVWbVeWbVu2
dduXZdv3fd/3fd/3fd/3fd/3fV0HQkNWAQASAAA6kiMpkiIpkuM4jiRJQGjIKgBABgBAAACK4iiO
4ziSJEmSJWmSZ3mWqJma6ZmeKqpAaMgqAAAQAEAAAAAAAACKpniKqXiKqHiO6IiSaJmWqKmaK8qm
7Lqu67qu67qu67qu67qu67qu67qu67qu67qu67qu67qu67quC4SGrAIAJAAAdCRHciRHUiRFUiRH
coDQkFUAgAwAgAAAHMMxJEVyLMvSNE/zNE8TPdETPdNTRVd0gdCQVQAAIACAAAAAAAAADMmwFMvR
HE0SJdVSLVVTLdVSRdVTVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTdM0TRMIDVkJ
AAABANBac8ytl45B6KyXyCikoNdOOeak18wogpznEDFjmMdSMUMMxpZBhJQFQkNWBABRAACAMcgx
xBxyzknqJEXOOSodpcY5R6mj1FFKsaZaO0qltlRr45yj1FHKKKVaS6sdpVRrqrEAAIAABwCAAAuh
0JAVAUAUAACBDFIKKYWUYs4p55BSyjnmHGKKOaecY845KJ2UyjknnZMSKaWcY84p55yUzknmnJPS
SSgAACDAAQAgwEIoNGRFABAnAOBwHE2TNE0UJU0TRU8UXdcTRdWVNM00NVFUVU0UTdVUVVkWTVWW
JU0zTU0UVVMTRVUVVVOWTVW1Zc80bdlUVd0WVdW2ZVv2fVeWdd0zTdkWVdW2TVW1dVeWdV22bd2X
NM00NVFUVU0UVddUVds2VdW2NVF0XVFVZVlUVVl2XVnXVVfWfU0UVdVTTdkVVVWWVdnVZVWWdV90
Vd1WXdnXVVnWfdvWhV/WfcKoqrpuyq6uq7Ks+7Iu+7rt65RJ00xTE0VV1URRVU1XtW1TdW1bE0XX
FVXVlkVTdWVVln1fdWXZ10TRdUVVlWVRVWVZlWVdd2VXt0VV1W1Vdn3fdF1dl3VdWGZb94XTdXVd
lWXfV2VZ92Vdx9Z13/dM07ZN19V101V139Z15Zlt2/hFVdV1VZaFX5Vl39eF4Xlu3ReeUVV13ZRd
X1dlWRduXzfavm48r21j2z6yryMMR76wLF3bNrq+TZh13egbQ+E3hjTTtG3TVXXddF1fl3XdaOu6
UFRVXVdl2fdVV/Z9W/eF4fZ93xhV1/dVWRaG1ZadYfd9pe4LlVW2hd/WdeeYbV1YfuPo/L4ydHVb
aOu6scy+rjy7cXSGPgIAAAYcAAACTCgDhYasCADiBAAYhJxDTEGIFIMQQkgphJBSxBiEzDkpGXNS
QimphVJSixiDkDkmJXNOSiihpVBKS6GE1kIpsYVSWmyt1ZpaizWE0loopbVQSouppRpbazVGjEHI
nJOSOSellNJaKKW1zDkqnYOUOggppZRaLCnFWDknJYOOSgchpZJKTCWlGEMqsZWUYiwpxdhabLnF
mHMopcWSSmwlpVhbTDm2GHOOGIOQOSclc05KKKW1UlJrlXNSOggpZQ5KKinFWEpKMXNOSgchpQ5C
SiWlGFNKsYVSYisp1VhKarHFmHNLMdZQUoslpRhLSjG2GHNuseXWQWgtpBJjKCXGFmOurbUaQymx
lZRiLCnVFmOtvcWYcyglxpJKjSWlWFuNucYYc06x5ZparLnF2GttufWac9CptVpTTLm2GHOOuQVZ
c+69g9BaKKXFUEqMrbVaW4w5h1JiKynVWEqKtcWYc2ux9lBKjCWlWEtKNbYYa4419ppaq7XFmGtq
seaac+8x5thTazW3GGtOseVac+695tZjAQAAAw4AAAEmlIFCQ1YCAFEAAAQhSjEGoUGIMeekNAgx
5pyUijHnIKRSMeYchFIy5yCUklLmHIRSUgqlpJJSa6GUUlJqrQAAgAIHAIAAGzQlFgcoNGQlAJAK
AGBwHMvyPFE0Vdl2LMnzRNE0VdW2HcvyPFE0TVW1bcvzRNE0VdV1dd3yPFE0VVV1XV33RFE1VdV1
ZVn3PVE0VVV1XVn2fdNUVdV1ZVm2hV80VVd1XVmWZd9YXdV1ZVm2dVsYVtV1XVmWbVs3hlvXdd33
hWE5Ordu67rv+8LxO8cAAPAEBwCgAhtWRzgpGgssNGQlAJABAEAYg5BBSCGDEFJIIaUQUkoJAAAY
cAAACDChDBQashIAiAIAAAiRUkopjZRSSimlkVJKKaWUEkIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIBQD4TzgA+D/YoCmxOEChISsBgHAAAMAYpZhyDDoJKTWMOQahlJRSaq1hjDEIpaTU
WkuVcxBKSam12GKsnINQUkqtxRpjByGl1lqssdaaOwgppRZrrDnYHEppLcZYc86995BSazHWWnPv
vZfWYqw159yDEMK0FGOuufbge+8ptlprzT34IIRQsdVac/BBCCGEizH33IPwPQghXIw55x6E8MEH
YQAAd4MDAESCjTOsJJ0VjgYXGrISAAgJACAQYoox55yDEEIIkVKMOecchBBCKCVSijHnnIMOQggl
ZIw55xyEEEIopZSMMeecgxBCCaWUkjnnHIQQQiillFIy56CDEEIJpZRSSucchBBCCKWUUkrpoIMQ
QgmllFJKKSGEEEIJpZRSSiklhBBCCaWUUkoppYQQSiillFJKKaWUEEIppZRSSimllBJCKKWUUkop
pZSSQimllFJKKaWUUlIopZRSSimllFJKCaWUUkoppZSUUkkFAAAcOAAABBhBJxlVFmGjCRcegEJD
VgIAQAAAFMRWU4mdQcwxZ6khCDGoqUJKKYYxQ8ogpilTCiGFIXOKIQKhxVZLxQAAABAEAAgICQAw
QFAwAwAMDhA+B0EnQHC0AQAIQmSGSDQsBIcHlQARMRUAJCYo5AJAhcVF2sUFdBnggi7uOhBCEIIQ
xOIACkjAwQk3PPGGJ9zgBJ2iUgcBAAAAAHAAAA8AAMcFEBHRHEaGxgZHh8cHSEgAAAAAAMgAwAcA
wCECREQ0h5GhscHR4fEBEhIAAAAAAAAAAAAEBAQAAAAAAAIAAAAEBE9nZ1MABC8bAAAAAAAAWqId
dgIAAACfEGJnEQEBISAoKSUpKTEulZWZp2EBAACMynF/xQhaO7IGCggAcMpvdJGUbaWbX7cZw5TW
su7p9x2EyMKpYIUXOpUggABAvb91T4jbdH96DOFzOPGa/exKAYxIX9M5MIt3pq4XANsJYACAS+2d
nH5jaLaruR1aB8fgv8ek9oGMnAHcXCgl7zPlNd7WdQ3qhWNXwJEAAgBrsIkhdN8hpXryAWCSOKWU
64ENAARpKEP5kvzg7KSv6UAC4ADA7bJIJ6Q4OXDuK4r3TtJ4rpsGEAAMbSgDu5L84WcxrrtDAeAA
gD13SNFyPu76Hl5eP3x3zytnn7ye1y/FAhTv1aCh2MLH7gEUAA4AsCXkRj4v1EgEbxSnsxyeuBoC
5AxLDWKmE0AAHG2fvRVD2VwMsNlQH9gD1MHYBADtM9D/4T24fb2EuAPATgHmKYpP3qtMWhDzS0+w
EgxvKBX3gyhm2BjAPEcgEQBABT67c3Y/7BF7FteB6C0NI21sEPjxxFT77sydPgJ6qp5uN7//N5TZ
4xZFVDgSsfP9q5MwxhjASwCnmFJkAAAA8NXung4XSU8frd5x5LzzkbbWWrvh6bkBAJi1PR8fYitZ
zsvlkhQ5fNpovZ5gv139+PhY/0gQHxMaWF1dPfvsqmbdZkWr32xHrAdbjALwQZb1pTK5l+VFOS3A
U4vbgvtoQmhndeikoLe3Pu1ysml29BtIAL5ZXu4Xv/+D8i8xpxgEvNMAGAAAYFgmRi8UAABAx+15
15dI3jOuE2CPgDlqv2HOVROf3ZSoSmmlnfT3CAAAAAAAPRoHSHJ+A2frbAXPXY6d+KvnEWGz1h0g
uNeP2A45bFxp45BqQBHpTA7If8uKmbb4AVWBSumRuTbapR307eAj9AkLWdj0xhi430t/iJl/Hy2r
m4gAvmedluY+PJmcaFHkLB9L8CchM3LYqAULsZ9WAM+QI3USAABAy+GaNWTzvbrRZ/6ToKb/xxc1
5Kj0P5cRAAAy/eHL0RncHyJmoTDor+HrmWgXJs5q84vUoRfSUJkIFLDsJxMPTohecauP997+jLip
tMk3+JPVbOeXXsPK3Ussrxn7Pvmw8QPvWYXX+bx/kuf9+6TBrU6RnDMAXpYce3ENlZNvEgT5SZmw
8fmdZ2Ce58i2M3D//ROQPSxOMshgQGhbosKtHe3665q9hroeByZGsD6lqjnr+hGGq2SRXftSbHrv
HBrXN9Xq810nwDpA3+ILXbZmDbDVcB2gl3kGAZzJVpOrAuhg6F2H12WDcsO8+cORyw/wtP1RS94O
vHv4SADbTJZ2Akun+ACH5cfBUtZlKcIYAInVwOCQjzUkb4IZSAA+lvxz9i9NARsgYe6RcwCYnkEE
AAQAAIh3v/jxDz96e98ALmssL58OLI/e3ILsLJloB6iHkw3mrqWs8FEtYNHQHsFAwtxGZ1uzfKsz
AIjYoXyiLnYAlzXUYM8h8ZHAhE0ADg==""")

# Yes, that's a hardcoded beep file because I was too lazy to get paths right.
# Got a problem with that? ;>
# Oh, taken from freesound.org and by junggle. You rock!

class Pororo(object):
    """a Pororo"""
    def __init__(self, timer, opt):
        self.timer = timer
        self.n = len(timer)
        self.size = opt.size
        self.gogogo = opt.paused^1

    def init_screen(self):
        """initialize the screen"""
        self.resize( self.size )
        self.clock = pygame.time.Clock()
        self.bgcolor = (0,0,0)

    def resize(self, size):
        # resize variables
        self.w, self.h = size
        self.r = min(self.w, self.h) / 2
        self.cx, self.cy = self.w / 2, self.h / 2
        
        # resize screen
        self.screen = pygame.display.set_mode(size,
                                              RESIZABLE|DOUBLEBUF)
        self.s = pygame.Surface(size)

        # resize worms
        for i, t in enumerate(self.timer, start=2):
            t.resize(size, i, self.n+1)

    def run(self):
        while 1:
            dt = self.clock.tick(30)
            for event in pygame.event.get():
                if event.type == KEYDOWN:
                    if event.key == K_q:
                        self.quit()
                    elif event.key == K_SPACE:
                        self.gogogo ^= 1
                elif event.type == VIDEORESIZE:
                    self.resize(event.size)
            
            must_fill = False
            
            if self.gogogo:
                for t in self.timer:
                    try:
                        must_fill |= t.update(dt)
                    except TimeWormDone as e:
                        if e[0] == self.timer[-1]:
                            # wait for final sound to play
                            time.sleep(0.23)
                            self.quit()
                
            if must_fill:    
                self.s.fill(self.bgcolor)
            
            self.s.lock()
            for t in self.timer:
                t.redraw(must_fill)
                for p in t.points:
                    pygame.draw.circle(self.s, t.color, p, t.circle_width)
            self.s.unlock()
            self.screen.blit(self.s, (0,0))
            pygame.display.flip()

    def quit(self):
        pygame.quit()
        sys.exit(0)

class TimeWormDone(BaseException):
    """signals that the worm has finished all its turns"""

class TimeWorm(object):
    """one timer to track
    
        n -> steps per cycle
        per_step -> seconds per step
    """
    def __init__(self, per_step, n):
        self.n = n
        self.per_step = [s * 1000 for s in per_step]
        self.queue = self.per_step[:]
        self.t = 0.0 # current time
        self.t_max = self.queue[0]
        self.margin = 0.1 # percent of circle_width to leave empty
        self.sound = pygame.mixer.Sound(StringIO.StringIO(BEEP))
        self.color = ((100 + randint(0,255)) // 2,
                      (100 + randint(0,255)) // 2,
                      (255 + randint(0,255)) // 2)

    def new_points(self):
        angle = self.start_angle
        self.points = []
        max_angle = 2 * math.pi * (self.t / self.t_max)
        while angle <= max_angle:
            point = (int(self.cx + math.sin(angle) * self.arc_r),
                     int(self.cy - math.cos(angle) * self.arc_r))
            self.points.append(point)
            angle += self.alpha
        self.start_angle = max_angle

    def resize(self, size, i, n):
        """resize coords"""
        self.w, self.h = size
        self.cx, self.cy = self.w / 2, self.h / 2
        self.r = min(self.w, self.h) / 2
        
        self.arc_width = self.r / n
        margin = self.arc_width / 2 * self.margin
        self.circle_width = int(self.arc_width / 2 - margin)
        self.arc_r = (i-1) * self.arc_width + margin + self.circle_width / 2
        self.alpha = math.asin(1 / self.arc_r)

        self.start_angle = 0.0
        self.points = []

        self.screen = pygame.display.set_mode(size,
                                              RESIZABLE|DOUBLEBUF)
    def redraw(self, update=True):
        if update:
            self.start_angle = 0.0
        self.new_points()        

    def update(self, dt):
        """update timer by dt"""
        must_fill = False
        self.t += dt
        if self.t >= self.t_max:
            self.t %= self.t_max
            
            # go to next phase in cycle
            self.queue.pop(0)
            self.alarm()
            if not self.queue:
                self.queue = self.per_step[:]
                if self.n > 1: # still turns to do
                    self.n -= 1
                elif self.n == 1:
                    self.n = 0
                    raise TimeWormDone(self)
            self.t_max = self.queue[0]
            
            must_fill = True
            
        return must_fill

    def alarm(self):
        """sound a cute alarm"""
        self.sound.play()

def main():
    pygame.init()
    parser = optparse.OptionParser(usage="""
    Give "step_size/steps" for each timer as an argument. A timer will take
    step_size seconds for own complete circle and to steps circles in total.

    You can leave out step_size and it will default to 1s or the total time of
    the timer before it, i.e. 2/20 /300 is identical to 2/20 40/300. You can
    also give step_size in minutes, like 1m/10 for a 1 minute timer with 10
    turns. 
                                   
    You can leave out steps to make the time repeat itself indefinetely. Pororo
    will terminate, however, if the last specified timer terminates.
                                   
    Finally, you can use more complex behaviours, like the famous (10+2)*5, by
    defining a chain with +, as in 10m+2m/5.
                                   
    To pause pororo, press Space. To quit, press q.""")
    
    parser.add_option("-p", "--paused", help="start paused", dest="paused",
                      action="store_true", default=False)
    parser.add_option("-s", "--size", help="start in size WxH", dest="size",
                      nargs=2, type="int", default=(300, 300))
    opt, args = parser.parse_args()

    timer = []
    per_step = [1.0]
    n = 1
    time_re = re.compile("""
                         (?P<per_step>
                            ( \d+(\.\d+)? ) ([sm])?
                            (\+ 
                                ( \d+(\.\d+)? ) ([sm])?
                            )*
                         )?
                         /
                         (?P<steps> \d+)?
                         """, re.X)
    for arg in args:
        m = time_re.match(arg)
        if m:
            if m.group("per_step"):
                per_step = []
                for step in m.group("per_step").split("+"):
                    if step[-1] == "m":
                        step = float(step[:-1]) * 60
                    else:
                        step = float(step)
                    per_step.append(step)
            else:
                if n:
                    per_step = [sum(per_step) * n]
                else:
                    per_step = [sum(per_step) * 1]
            
            if m.group("steps"):
                n = float(m.group("steps"))
            else:
                n = 0
        else:
            parser.error("invalid arg: " + arg)

        timer.append(TimeWorm(per_step, n))
    
    if not timer:
        parser.error("no timer specified")

    p = Pororo(timer, opt)
    p.init_screen()
    p.run()

if __name__ == "__main__":
    main()
